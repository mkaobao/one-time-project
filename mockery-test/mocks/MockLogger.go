// Code generated by mockery v2.50.4. DO NOT EDIT.

package logger

import mock "github.com/stretchr/testify/mock"

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Log provides a mock function with given fields: message
func (_m *MockLogger) Log(message string) string {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockLogger_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockLogger_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - message string
func (_e *MockLogger_Expecter) Log(message interface{}) *MockLogger_Log_Call {
	return &MockLogger_Log_Call{Call: _e.mock.On("Log", message)}
}

func (_c *MockLogger_Log_Call) Run(run func(message string)) *MockLogger_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLogger_Log_Call) Return(_a0 string) *MockLogger_Log_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_Log_Call) RunAndReturn(run func(string) string) *MockLogger_Log_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
